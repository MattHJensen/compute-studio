import * as React from "react";
import * as ReactDOM from "react-dom";
import ReactLoading from "react-loading";
import { Card, Row, Col, OverlayTrigger, Tooltip } from "react-bootstrap";
import * as moment from "moment";
import { RemoteOutputs, Outputs, SimAPIData, Output } from "./types";

interface OutputsProps {
  fetchRemoteOutputs: () => Promise<SimAPIData<RemoteOutputs>>;
  fetchOutputs: () => Promise<SimAPIData<Outputs>>;
}

type OutputsState = Readonly<{
  remoteSim: SimAPIData<RemoteOutputs>;
  sim: SimAPIData<Outputs>;
  openPortals: Array<number>;
}>;

type OutputsPortalProps = {
  output: string; //Output;
  rmOpenPortal: () => void;
};

class OutputsPortal extends React.Component<OutputsPortalProps, {}> {
  el: HTMLDivElement;
  externalWindow: Window;

  constructor(props) {
    super(props);
    this.el = document.createElement("div");
    this.externalWindow = null;
  }

  render() {
    return ReactDOM.createPortal(<p>{this.props.output}</p>, this.el);
  }

  componentDidMount() {
    this.externalWindow = window.open(
      "",
      "",
      "width=600,height=400,left=200,top=200"
    );

    this.externalWindow.document.body.appendChild(this.el);
    this.externalWindow.addEventListener("beforeunload", event => {
      // Cancel the event as stated by the standard.
      console.log("closing?");
      event.preventDefault();
      this.props.rmOpenPortal();
      // this.externalWindow.close();
      // Chrome requires returnValue to be set.
      event.returnValue = "";
    });
  }

  componentWillUnmount() {
    console.log("Unmount?");
    this.props.rmOpenPortal();
    // modalRoot.removeChild(this.el);
    if (this.externalWindow) this.externalWindow.close();
  }
}

export default class OutputsComponent extends React.Component<
  OutputsProps,
  OutputsState
> {
  constructor(props) {
    super(props);
    this.state = {
      remoteSim: null,
      sim: null,
      openPortals: []
    };
  }

  componentDidMount() {
    this.props.fetchRemoteOutputs().then(data => {
      this.setState({ remoteSim: data });
    });
    this.props.fetchOutputs().then(data => {
      this.setState({ sim: data });
    });
  }

  addOpenPortal = (ix: number) => {
    this.setState(prevState => ({
      openPortals: [...prevState.openPortals, ix]
    }));
  };

  rmOpenPortal = (ix: number) => {
    console.log("rm", ix);
    this.setState(prevState => ({
      openPortals: prevState.openPortals.filter(value => value != ix)
    }));
  };

  render() {
    if (!this.state.remoteSim) {
      return (
        <Card className="card-outer">
          <Card.Body>
            <div className="d-flex justify-content-center">
              <ReactLoading type="spokes" color="#2b2c2d" />
            </div>
          </Card.Body>
        </Card>
      );
    }
    if (this.state.openPortals.length && this.state.sim == null) {
      alert("still waiting on sim data...");
    }
    let creation_date = moment(this.state.remoteSim.creation_date).format(
      "MMMM Do YYYY, h:mm:ss a"
    );
    let model_version = this.state.remoteSim.model_version;
    let project = this.state.remoteSim.project;
    let remoteOutputs = this.state.remoteSim.outputs.outputs;

    return (
      <Card className="card-outer" style={{ overflow: "auto" }}>
        <Card className="card-inner">
          <Card.Body>
            <p className="lead">
              {`These results were generated by ${project.title} on ${creation_date} using ${model_version}.`}
            </p>
            <Row className="text-center">
              {remoteOutputs.renderable.outputs.map((remoteOutput, ix) => (
                <Col style={{ padding: 0 }} key={`output-${ix}`}>
                  {this.state.openPortals.includes(ix) ? (
                    <OutputsPortal
                      output={`hello world-${ix}`}
                      rmOpenPortal={() => this.rmOpenPortal(ix)}
                    />
                  ) : null}
                  <OverlayTrigger
                    trigger={["hover", "click"]}
                    overlay={
                      <Tooltip id={`${ix}-tooltip`}>
                        {remoteOutput.title}
                      </Tooltip>
                    }
                  >
                    <a href="#" onClick={() => this.addOpenPortal(ix)}>
                      <img
                        style={{ objectFit: "contain" }}
                        src={remoteOutput.screenshot}
                        alt={remoteOutput.title}
                        height={500}
                        width={500}
                      />
                    </a>
                  </OverlayTrigger>
                </Col>
              ))}
            </Row>
          </Card.Body>
        </Card>
      </Card>
    );
  }
}
