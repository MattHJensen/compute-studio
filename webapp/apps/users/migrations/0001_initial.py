# Generated by Django 2.1 on 2018-09-24 22:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Charge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', models.CharField(max_length=255, unique=True)),
                ('amount', models.IntegerField()),
                ('amount_refunded', models.IntegerField()),
                ('balance_transaction', models.CharField(max_length=255)),
                ('captured', models.BooleanField(default=False)),
                ('created', models.DateTimeField()),
                ('currency', models.CharField(choices=[('usd', 'usd')], default='usd', max_length=3)),
                ('dispute', models.BooleanField(default=False)),
                ('livemode', models.BooleanField(default=False)),
                ('paid', models.BooleanField(blank=True, null=True)),
                ('receipt_email', models.CharField(blank=True, default='', max_length=800)),
                ('refunded', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('succeeded', 'succeeded'), ('pending', 'pending'), ('failed', 'failed')], default='pending', max_length=9)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', models.CharField(max_length=255, unique=True)),
                ('livemode', models.BooleanField(default=False)),
                ('account_balance', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('currency', models.CharField(choices=[('usd', 'usd')], default='usd', max_length=3)),
                ('delinquent', models.BooleanField(default=False)),
                ('default_source', models.TextField(blank=True, null=True)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField()),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', models.CharField(max_length=255, unique=True)),
                ('created', models.DateTimeField()),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('livemode', models.BooleanField(default=False)),
                ('request', models.CharField(max_length=255)),
                ('kind', models.CharField(max_length=64)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField()),
                ('charge', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='charge', to='users.Charge')),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='customer', to='users.Customer')),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', models.CharField(max_length=255, unique=True)),
                ('attempt_count', models.IntegerField()),
                ('attempted', models.BooleanField(default=False)),
                ('currency', models.CharField(choices=[('usd', 'usd')], default='usd', max_length=3)),
                ('description', models.TextField(blank=True)),
                ('ending_balance', models.IntegerField(null=True)),
                ('forgiven', models.BooleanField(default=False)),
                ('hosted_invoice_url', models.CharField(blank=True, default='', max_length=799)),
                ('invoice_pdf', models.CharField(blank=True, default='', max_length=799)),
                ('livemode', models.BooleanField(default=False)),
                ('paid', models.BooleanField(default=False)),
                ('period_end', models.DateTimeField()),
                ('period_start', models.DateTimeField()),
                ('receipt_number', models.CharField(max_length=64, null=True)),
                ('starting_balance', models.IntegerField()),
                ('statement_descriptor', models.CharField(blank=True, default='', max_length=22)),
                ('subscription_proration_date', models.DateTimeField(blank=True, null=True)),
                ('subtotal', models.IntegerField(blank=True, null=True)),
                ('tax', models.IntegerField(blank=True, null=True)),
                ('tax_percent', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('total', models.IntegerField()),
                ('charge', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='latest_invoice', to='users.Charge')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='users.Customer')),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', models.CharField(max_length=255, unique=True)),
                ('active', models.BooleanField(default=False)),
                ('aggregate_usage', models.CharField(choices=[('sum', 'sum'), ('last_during_period', 'last_during_period'), ('max', 'max'), ('last_ever', 'LAST_EVER')], default='sum', max_length=18, null=True)),
                ('amount', models.IntegerField()),
                ('created', models.DateTimeField(blank=True, null=True)),
                ('currency', models.CharField(choices=[('usd', 'usd')], default='usd', max_length=3)),
                ('interval', models.CharField(choices=[('day', 'day'), ('week', 'week'), ('month', 'month'), ('year', 'year')], default='month', max_length=5)),
                ('livemode', models.BooleanField(default=False)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField()),
                ('nickname', models.CharField(max_length=255)),
                ('trial_period_days', models.IntegerField(default=0, null=True)),
                ('usage_type', models.CharField(choices=[('licensed', 'licensed'), ('metered', 'metered')], max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_access', models.BooleanField(default=False)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('access_public', 'Has access to public projects'),),
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('server_cost', models.DecimalField(decimal_places=3, max_digits=6, null=True)),
                ('exp_task_time', models.IntegerField(null=True)),
                ('is_public', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', models.CharField(max_length=255, unique=True)),
                ('livemode', models.BooleanField(default=False)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField()),
                ('usage', models.DecimalField(decimal_places=3, max_digits=8)),
                ('current_period_start', models.DateTimeField(blank=True, null=True)),
                ('current_period_end', models.DateTimeField(blank=True, null=True)),
                ('canceled_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subscriptions', to='users.Customer')),
                ('plans', models.ManyToManyField(related_name='subscriptions', to='users.Plan')),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', models.CharField(max_length=255, unique=True)),
                ('livemode', models.BooleanField(default=False)),
                ('created', models.DateTimeField()),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_items', to='users.Plan')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_items', to='users.Subscription')),
            ],
        ),
        migrations.CreateModel(
            name='UsageRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', models.CharField(max_length=255, unique=True)),
                ('livemode', models.BooleanField(default=False)),
                ('action', models.CharField(choices=[('increment', 'increment'), ('set', 'set')], default='increment', max_length=9)),
                ('quantity', models.IntegerField(default=0)),
                ('timestamp', models.DateTimeField()),
                ('subscription_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_records', to='users.SubscriptionItem')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='project',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='users.Project'),
        ),
        migrations.AddField(
            model_name='plan',
            name='product',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='plans', to='users.Product'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='subscription',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoices', to='users.Subscription'),
        ),
        migrations.AddField(
            model_name='event',
            name='invoice',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invoice', to='users.Invoice'),
        ),
        migrations.AddField(
            model_name='charge',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='charges', to='users.Customer'),
        ),
    ]
