ARG TAG
FROM celerybase

# install packages here
# install packages necessary for celery and creating screenshots
RUN pip install -r requirements.txt

RUN pip install cs-storage>=1.8.0 && \
    conda install -c conda-forge jinja2 pyppeteer && pyppeteer-install

ARG TITLE
ARG OWNER
ARG REPO_URL
ARG RAW_REPO_URL
ARG BRANCH=master

# Install necessary packages, copying files, etc.
######################
# Bump to trigger build
ARG BUILD_NUM=0

ADD ${RAW_REPO_URL}/${BRANCH}/cs-config/install.sh /home
RUN cat /home/install.sh
RUN bash /home/install.sh

# Bump to trigger re-install of source, without re-installing dependencies.
ARG INSTALL_NUM=0
RUN pip install "git+${REPO_URL}.git@${BRANCH}#egg=cs-config&subdirectory=cs-config"
ADD ${RAW_REPO_URL}/${BRANCH}/cs-config/cs_config/tests/test_functions.py /home
RUN pip install cs-kit
RUN py.test /home/test_functions.py -v -s
######################

ARG SIM_TIME_LIMIT
COPY templates/tasks_template.py tasks_template.py
COPY tasks_writer.py tasks_writer.py
RUN mkdir /home/distributed/api/celery_app
RUN python tasks_writer.py --owner ${OWNER} --title ${TITLE} --sim-time-limit ${SIM_TIME_LIMIT} --out /home/distributed/api/celery_app

# copy over necessary files for this project's celery app
COPY ./api/__init__.py /home/distributed/api/__init__.py
COPY ./api/celery_app/__init__.py /home/distributed/api/celery_app/__init__.py
COPY ./setup.py /home/distributed
RUN cd /home/distributed && pip install -e .

WORKDIR /home/distributed/api

COPY celery_sim.sh /home/distributed/api/celery_sim.sh
COPY celery_io.sh /home/distributed/api/celery_io.sh

COPY ./cs-dask-sim /home/distributed/cs-dask-sim
RUN cd /home/distributed/cs-dask-sim && pip install -e .
